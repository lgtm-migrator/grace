import std::list;
import std::int;
import std::time;

const SIEVE_SIZE: Int = 1000000;
const BIT_COUNT: Int = 500000;
const CORRECT_COUNT: Int = 78498;

func reset(bits: List):
  final len: Int = bits.length();
  for i: Int in [0..len]:
    bits[i] = true;
  end
end

func run_sieve(bits: List):
  final max: Int = Int(SIEVE_SIZE.sqrt());
  var factor: Int = 3;

  while factor < max:
    var f: Int = factor;
    while f < 1000:
      if f % 2 > 0 and bits[f / 2]:
        factor = f;
        break;
      end
      f = f + 1;
    end

    final min: Int = factor * 3;
    final jump: Int = factor * 2;
    for i: Int in [min..SIEVE_SIZE by jump]:
      bits[i / 2] = false;
    end

    factor = factor + 2;
  end
end

func main():
  var passes: Int = 0;

  final start: Int = std::time::time_ms();

  var bits: List;
  while (std::time::time_ms() - start) < 5000:
    bits = [true] * BIT_COUNT;
    run_sieve(bits);
    passes = passes + 1;
  end

  var count: Int = 0;
  for b: Bool in bits:
    if b:
      count = count + 1;
    end
  end

  if count == CORRECT_COUNT:
    println("Found " + count + " primes under 1,000,000 in " + passes + " passes!");
  else:
    println("Found incorrect number of primes " + count);
  end
end
