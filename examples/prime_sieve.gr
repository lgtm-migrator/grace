import std::list;
import std::int;
import std::time;
import std::keyvaluepair;

func run_sieve(bits: List, sieve_size: Int):
  final max = sieve_size.sqrt();
  var factor: Int = 3;

  while factor < max:
    var i = factor;
    while i < sieve_size:
      if i % 2 != 0 and bits[i / 2]:
        factor = i;
        break;
      end
      i += 1;
    end

    var min: Int = factor * 3;
    final jump: Int = factor * 2;
    while min < sieve_size:
      bits[min / 2] = false;
      min += jump;
    end

    factor += 2;
  end
end

func main():

  var prime_counts = [
    KeyValuePair(10, 4),
    KeyValuePair(100, 25),
    KeyValuePair(1000, 168),
    KeyValuePair(10000, 1229),
    KeyValuePair(100000, 9592),
    KeyValuePair(1000000, 78498),
    KeyValuePair(10000000, 664579),
    KeyValuePair(100000000, 5761455),
  ];

  for pair in prime_counts:
    var sieve_size = pair.key();
    var correct_count = pair.value();

    var bit_count: Int = (sieve_size + 1) / 2;
    var passes: Int = 0;
    var bits: List;

    final start: Int = std::time::time_ms();

    while (std::time::time_ms() - start) < 5000:
      bits = [true] * bit_count;
      run_sieve(bits, sieve_size);
      passes += 1;
    end

    var count: Int = 0;
    for b: Bool in bits:
      if b:
        count += 1;
      end
    end

    if count == correct_count:
      println("Found " + count + " primes under " + sieve_size + " in " + passes + " passes!");
    else:
      println("Found incorrect number of primes " + count + " for sieve size " + sieve_size);
    end
  end
end
