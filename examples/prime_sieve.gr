import std::list;
import std::math;
import std::time;

func reset(bits: List):
  final len: Int = std::list::length(bits);
  for i: Int in [0..len]:
    std::list::set(bits, i, true);
  end
end

func get_bit(bits: List, i: Int) :: Bool:
  return i % 2 > 0 and std::list::at(bits, i / 2);
end

func clear_bit(bits: List, i: Int):
  std::list::set(bits, i / 2, false);
end

func run_sieve(bits: List):
  final max: Int = Int(std::math::sqrti(1000000));
  var factor: Int = 3;

  while factor < max:
    var f: Int = factor;
    while f < 1000:
      if get_bit(bits, f):
        factor = f;
        break;
      end
      f = f + 1;
    end

    final min: Int = factor * 3;
    final jump: Int = factor * 2;
    for i: Int in [min..1000000 by jump]:
      clear_bit(bits, i);
    end

    factor = factor + 2;
  end
end

func main():
  final sieve_count: Int = 1000000;
  final bit_count: Int = (sieve_count + 1) / 2;
  final correct_count: Int = 78498;

  var passes: Int = 0;

  final start: Int = std::time::time_ms();

  var bits;
  while (std::time::time_ms() - start) < 5000:
    bits = [true] * bit_count;
    run_sieve(bits);
    passes = passes + 1;
  end

  var count: Int = 0;
  for b: Bool in bits:
    if b:
      count = count + 1;
    end
  end

  if count == correct_count:
    println("Found " + count + " primes under 1,000,000 in " + passes + " passes!");
  else:
    println("Found incorrect number of primes " + count);
  end
end
