func factorial(num):
  if num < 2:
    return num;
  end
  return num * factorial(num - 1);
end

func dictionary_insert(dict, key, value):
  __NATIVE_DICTIONARY_INSERT(dict, key, value);
end

func main():
  final operatives = ["Hays", "Syl", "Ryan"];

  for operative, index in operatives:
    println("Operative #" + index + " is " + operative);
  end

  println();

  final dict = {
    "Jamie": "Snake",
    "Operative List": operatives,
    factorial(10): factorial(20),
  };

  for key, value in dict:
    println("The key is " + key + " and the value is " + value);
  end

  assert(instanceof(dict, Dict) and typename(dict) == "Dict");
  final as_list = List(dict);
  for item in as_list:
    println(item);
  end

  println();

  final testing_rehash = {};

  dictionary_insert(testing_rehash, "Ryan", "Jeffares");
  dictionary_insert(testing_rehash, "Ryan1", "Jeffares");
  dictionary_insert(testing_rehash, "Ryan2", "Jeffares");
  dictionary_insert(testing_rehash, "Ryan3", "Jeffares");
  dictionary_insert(testing_rehash, "Ryan4", "Jeffares");
  dictionary_insert(testing_rehash, "Ryan5", "Jeffares");
  dictionary_insert(testing_rehash, "Ryan6", "Jeffares");
  dictionary_insert(testing_rehash, "Ryan7", "Jeffares");
  dictionary_insert(testing_rehash, "Ryan8", "Jeffares");
  dictionary_insert(testing_rehash, "Ryan9", "Jeffares");
  dictionary_insert(testing_rehash, "Ryan10", "Jeffares");

  println(testing_rehash);
end
