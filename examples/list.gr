import std::list;

func factorial(n):
  if n < 2:
    return 1;
  end
  return n * factorial(n - 1);
end

func make_list(n1, n2, n3):
  return [n1, n2, n3];
end

func multiply_list(l, multiple):
  return l * multiple;
end

func sorted(this List list):
  return __NATIVE_LIST_SORTED(list);
end

func last(this List list):
  return __NATIVE_LIST_LAST(list);
end

func main():
  var l = [2, 1, 0].sorted().last();
  println(l);

  var empty_list = [];
  println(empty_list);

  var some_numbers = [69, 420, 140];
  println(some_numbers);

  var result = make_list("Hello", 2**3, false);
  println(result);

  var factorials = [factorial(5), factorial(10), factorial(20), factorial(30), factorial(50)]; // ya like integer overflow
  println(factorials);

  for i in [0..100 by 10]:
    final multiplied = multiply_list([false], i);
    println(multiplied);
  end

  final str = "this is a string";
  final list_of_lists = [[str], [true, false], [1, 2, 3]];
  println(list_of_lists);
  
  final str_as_chars = List(str);
  println(str_as_chars);

  final list_range = [0..10 by 2];
  println(list_range);

  if instanceof(list_range, List):
    println("local variable is indeed, a list");
  end

  final unsorted = [1, 5, 2, 100, 6, 0, 2.5, -0.14];
  unsorted.sort();
  println("Sorted: " + unsorted);

  unsorted.append("Ryan");
  try:
    unsorted.sort();
  catch e:
    println(e);
  end

  println("Popping " + unsorted.pop());
  println(unsorted);

  unsorted.remove(0);
  unsorted.insert(2, "Hello");
  println(unsorted);
end
