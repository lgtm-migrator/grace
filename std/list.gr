import std::math;

func export at(this List list, index: Int):
  return __NATIVE_LIST_GET_AT_INDEX(list, index);
end

func export set(this List list, index: Int, value):
  __NATIVE_LIST_SET_AT_INDEX(list, index, value);
end

func export append(this List list, value):
  __NATIVE_LIST_APPEND(list, value);
end

func export append_range(this List dest, source: List):
  __NATIVE_LIST_APPEND_RANGE(dest, source);
end

func export insert(this List list, index: Int, value):
  __NATIVE_LIST_INSERT(list, index, value);
end

func export remove(this List list, index: Int):
  return __NATIVE_LIST_REMOVE(list, index);
end

func export remove_range(this List list, start: Int, count: Int):
  return __NATIVE_LIST_REMOVE_RANGE(list, start, count);
end

func export pop(this List list):
  return __NATIVE_LIST_POP(list);
end

func export sort(this List list):
  __NATIVE_LIST_SORT(list);
end

func export sort_descending(this List list):
  __NATIVE_LIST_SORT_DESCENDING(list);
end

func export sorted(this List list) :: List:
  return __NATIVE_LIST_SORTED(list);
end

func export sorted_descending(this List list) :: List:
  return __NATIVE_LIST_SORTED_DESCENDING(list);
end

func export get_range(this List list, start: Int, count: Int) :: List:
  return __NATIVE_LIST_GET_RANGE(list, start, count);
end

func export first(this List list):
  return __NATIVE_LIST_FIRST(list);
end

func export last(this List list):
  return __NATIVE_LIST_LAST(list);
end

func export length(this List list) :: Int:
  return __NATIVE_LIST_LENGTH(list);
end

func export contains(this List list, value) :: Bool:
  for element in list:
    if element == value:
      return true;
    end
  end

  return false;
end

func export zip(this List list, final other: List) :: List:
  if !instanceof(list, List):
    throw("Expected `List` for `list` in `std::math::max(list, other)` but got `" + typename(list) + '`');
  end

  if !instanceof(other, List):
    throw("Expected `List` for `other` in `std::math::max(first, other)` but got `" + typename(other) + '`');
  end

  var l1 = list.length();
  var l2 = list.length();

  var min = std::math::min(l1, l2);

  var res = [];

  for i in [0..min]:
    res.append(KeyValuePair(list[i], other[i]));
  end

  return res;
end
